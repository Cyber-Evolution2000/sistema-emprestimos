// ‚úÖ SISTEMA ADMIN - BANCO DE DADOS APENAS (ZERO FALLBACK)
console.log('üîí Admin sistema carregado - MODO BANCO DE DADOS APENAS');

// ‚úÖ FUN√á√ÉO DE NAVEGA√á√ÉO CORRIGIDA
function showSection(sectionId, event) {
    // Prevenir comportamento padr√£o do link se event existir
    if (event) {
        event.preventDefault();
    }
    
    console.log('üîÑ Navegando para:', sectionId);
    
    // Esconder todas as se√ß√µes
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.add('hidden');
    });
    
    // Remover active de todos os links
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    
    // Mostrar se√ß√£o selecionada
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.remove('hidden');
    } else {
        console.error('‚ùå Se√ß√£o n√£o encontrada:', sectionId);
    }
    
    // Adicionar active ao link clicado
    if (event && event.currentTarget) {
        event.currentTarget.classList.add('active');
    }
    
    // Atualizar t√≠tulo da p√°gina
    const titles = {
        'dashboard': 'Dashboard',
        'clientes': 'Gerenciar Clientes', 
        'emprestimos': 'Gerenciar Empr√©stimos',
        'pagamentos': 'Gerenciar Pagamentos',
        'settings': 'Configura√ß√µes'
    };
    
    const pageTitle = document.getElementById('pageTitle');
    if (pageTitle && titles[sectionId]) {
        pageTitle.textContent = titles[sectionId];
    }
    
    // Carregar dados espec√≠ficos da se√ß√£o
    switch(sectionId) {
        case 'dashboard':
            atualizarDashboard();
            break;
        case 'clientes':
            carregarClientes();
            break;
        case 'emprestimos':
            carregarEmprestimos();
            break;
        case 'pagamentos':
            carregarPagamentos();
            break;
        case 'settings':
            // Nada por enquanto
            break;
    }
}

// ‚úÖ CARREGAR CLIENTES - BANCO APENAS
async function carregarClientes() {
    try {
        console.log('üîÑ Buscando clientes do PostgreSQL...');
        
        const response = await fetch('/api/admin/clientes');
        
        if (response.status === 503) {
            throw new Error('Servidor indispon√≠vel. Tente novamente.');
        }
        
        if (!response.ok) {
            throw new Error(`Falha na conex√£o: ${response.status}`);
        }
        
        const clientes = await response.json();
        console.log(`‚úÖ Clientes carregados do PostgreSQL: ${clientes.length}`);
        exibirClientes(clientes);
        
    } catch (error) {
        console.error('üí• Erro ao carregar clientes:', error);
        
        const tbody = document.getElementById('tabelaClientes');
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-danger py-4">
                    <i class="fas fa-database"></i><br>
                    <strong>Falha na Conex√£o</strong><br>
                    <small>${error.message}</small><br>
                    <small class="text-muted">Verifique se o servidor est√° online</small>
                </td>
            </tr>
        `;
        
        showNotification('üö® ' + error.message, 'error');
    }
}

// ‚úÖ FUN√á√ÉO CORRIGIDA - EXIBIR CLIENTES SEM DUPLICA√á√ÉO
async function exibirClientes(clientes) {
    const tbody = document.getElementById('tabelaClientes');
    tbody.innerHTML = '';

    if (clientes.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-muted py-4">
                    <i class="fas fa-users"></i><br>
                    Nenhum cliente cadastrado<br>
                    <small>Use o bot√£o "Novo Cliente" para come√ßar</small>
                </td>
            </tr>
        `;
        return;
    }

    // ‚úÖ BUSCAR TODOS OS EMPR√âSTIMOS UMA √öNICA VEZ
    let todosEmprestimos = [];
    try {
        const response = await fetch('/api/admin/emprestimos');
        if (response.ok) {
            todosEmprestimos = await response.json();
        }
    } catch (error) {
        console.error('Erro ao buscar empr√©stimos:', error);
    }

    // ‚úÖ CONTAR EMPR√âSTIMOS POR CLIENTE
    const contagemEmprestimos = {};
    todosEmprestimos.forEach(emprestimo => {
        const cpf = emprestimo.cliente_cpf;
        contagemEmprestimos[cpf] = (contagemEmprestimos[cpf] || 0) + 1;
    });

    // ‚úÖ EXIBIR CLIENTES COM CONTAGEM CORRETA
    clientes.forEach(cliente => {
        const totalEmprestimos = contagemEmprestimos[cliente.cpf] || 0;
        
        const row = `
            <tr>
                <td>${cliente.cpf}</td>
                <td><strong>${cliente.nome}</strong></td>
                <td>${cliente.telefone || 'N/A'}</td>
                <td>${cliente.email || 'N/A'}</td>
                <td>
                    <span class="badge ${totalEmprestimos > 0 ? 'bg-primary' : 'bg-secondary'}">
                        ${totalEmprestimos}
                    </span>
                </td>
                <td>
                    <button class="btn btn-sm btn-warning" onclick="editarCliente('${cliente.cpf}')">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="excluirCliente('${cliente.cpf}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `;
        tbody.innerHTML += row;
    });
}

// ‚úÖ ABRIR MODAL CLIENTE CORRIGIDO
function abrirModalCliente() {
    try {
        const modalElement = document.getElementById('modalCliente');
        if (!modalElement) {
            throw new Error('Modal de cliente n√£o encontrado');
        }
        
        const modal = new bootstrap.Modal(modalElement);
        const form = document.getElementById('formCliente');
        
        // Configurar para novo cliente
        const modalTitle = document.getElementById('modalClienteTitle');
        const cpfInput = document.getElementById('cpf');
        
        if (modalTitle) modalTitle.textContent = 'Novo Cliente';
        if (cpfInput) {
            cpfInput.readOnly = false;
            cpfInput.value = '';
        }
        
        if (form) form.reset();
        
        modal.show();
        console.log('‚úÖ Modal de novo cliente aberto');
        
    } catch (error) {
        console.error('‚ùå Erro ao abrir modal:', error);
        showNotification('Erro ao abrir formul√°rio: ' + error.message, 'error');
    }
}

// ‚úÖ SALVAR CLIENTE ATUALIZADO
async function salvarCliente() {
    try {
        const cpf = document.getElementById('cpf').value;
        const nome = document.getElementById('nome').value;
        const email = document.getElementById('email').value;
        const telefone = document.getElementById('telefone').value;
        const endereco = document.getElementById('endereco').value;
        const isEditing = document.getElementById('cpf').readOnly;

        if (!cpf || !nome || !telefone) {
            showNotification('Por favor, preencha CPF, nome e telefone.', 'warning');
            return;
        }

        const clienteData = {
            cpf: cpf,
            nome: nome,
            email: email,
            telefone: telefone,
            endereco: endereco
        };

        let response;
        let actionText;
        
        if (isEditing) {
            console.log('‚úèÔ∏è Atualizando cliente existente...');
            response = await fetch(`/api/admin/clientes/${cpf}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(clienteData)
            });
            actionText = 'atualizado';
        } else {
            console.log('üíæ Criando novo cliente...');
            response = await fetch('/api/admin/clientes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(clienteData)
            });
            actionText = 'cadastrado';
        }

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Falha ao salvar: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('‚úÖ Cliente salvo:', result);
        
        // Fechar modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('modalCliente'));
        if (modal) modal.hide();
        
        // Mostrar notifica√ß√£o elegante
        showNotification(`Cliente ${actionText} com sucesso!`, 'success');
        
        // Recarregar lista
        setTimeout(() => {
            carregarClientes();
        }, 1000);
        
    } catch (error) {
        console.error('üí• Erro ao salvar cliente:', error);
        
        let errorMessage = error.message;
        if (error.message.includes('23505')) {
            errorMessage = 'CPF j√° cadastrado no sistema!';
        } else if (error.message.includes('400')) {
            errorMessage = 'Dados inv√°lidos. Verifique as informa√ß√µes.';
        }
        
        showNotification(errorMessage, 'error', 5000);
    }
}

// ‚úÖ EDITAR CLIENTE
async function editarCliente(cpf) {
    try {
        console.log('üìù Editando cliente:', cpf);
        
        // Buscar dados do cliente
        const response = await fetch('/api/admin/clientes');
        if (!response.ok) throw new Error('Falha ao buscar clientes');
        
        const clientes = await response.json();
        const cliente = clientes.find(c => c.cpf === cpf);
        
        if (!cliente) {
            showNotification('Cliente n√£o encontrado!', 'error');
            return;
        }
        
        // Preencher modal com dados do cliente
        document.getElementById('modalClienteTitle').textContent = 'Editar Cliente';
        document.getElementById('cpf').value = cliente.cpf;
        document.getElementById('nome').value = cliente.nome;
        document.getElementById('email').value = cliente.email || '';
        document.getElementById('telefone').value = cliente.telefone || '';
        document.getElementById('endereco').value = cliente.endereco || '';
        document.getElementById('cpf').readOnly = true;
        
        // Mostrar modal
        const modal = new bootstrap.Modal(document.getElementById('modalCliente'));
        modal.show();
        
    } catch (error) {
        console.error('‚ùå Erro ao editar cliente:', error);
        showNotification('Erro ao carregar dados do cliente: ' + error.message, 'error');
    }
}

// ‚úÖ EXCLUIR CLIENTE
async function excluirCliente(cpf) {
    try {
        // Verificar se o cliente tem empr√©stimos
        const emprestimosResponse = await fetch('/api/admin/emprestimos');
        if (emprestimosResponse.ok) {
            const emprestimos = await emprestimosResponse.json();
            const emprestimosCliente = emprestimos.filter(e => e.cliente_cpf === cpf);
            
            if (emprestimosCliente.length > 0) {
                showNotification(
                    `N√£o √© poss√≠vel excluir! Cliente possui ${emprestimosCliente.length} empr√©stimo(s) ativo(s).`, 
                    'warning', 
                    6000
                );
                return;
            }
        }
        
        // Usar modal de confirma√ß√£o
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
        document.getElementById('confirmMessage').textContent = 
            `Tem certeza que deseja excluir o cliente ${cpf}? Esta a√ß√£o n√£o pode ser desfeita!`;
        
        // Esperar confirma√ß√£o do usu√°rio
        const userConfirmed = await new Promise((resolve) => {
            document.getElementById('confirmYes').onclick = () => {
                confirmModal.hide();
                resolve(true);
            };
            document.getElementById('confirmNo').onclick = () => {
                confirmModal.hide();
                resolve(false);
            };
            confirmModal.show();
        });
        
        if (!userConfirmed) return;
        
        console.log('üóëÔ∏è Excluindo cliente:', cpf);
        
        const response = await fetch(`/api/admin/clientes/${cpf}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('Cliente n√£o encontrado');
            }
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        showNotification('Cliente exclu√≠do com sucesso!', 'success');
        carregarClientes();
        
    } catch (error) {
        console.error('‚ùå Erro ao excluir cliente:', error);
        
        if (error.message.includes('404')) {
            showNotification('Cliente n√£o encontrado!', 'error');
        } else {
            showNotification('Erro ao excluir cliente: ' + error.message, 'error');
        }
    }
}

// ‚úÖ CARREGAR EMPR√âSTIMOS
async function carregarEmprestimos() {
    try {
        console.log('üîÑ Buscando empr√©stimos do PostgreSQL...');
        
        const response = await fetch('/api/admin/emprestimos');
        
        if (!response.ok) {
            throw new Error(`Falha na conex√£o: ${response.status}`);
        }
        
        const emprestimos = await response.json();
        console.log(`‚úÖ Empr√©stimos carregados: ${emprestimos.length}`);
        
        const tbody = document.getElementById('tabelaEmprestimos');
        tbody.innerHTML = '';

        if (emprestimos.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center text-muted py-4">
                        <i class="fas fa-hand-holding-usd"></i><br>
                        Nenhum empr√©stimo cadastrado<br>
                        <small>Use o bot√£o "Novo Empr√©stimo" para come√ßar</small>
                    </td>
                </tr>
            `;
            return;
        }

        emprestimos.forEach(emprestimo => {
            const nomeCliente = emprestimo.cliente_nome || 'N/A';
            const cpfCliente = emprestimo.cliente_cpf || 'N/A';
            const totalParcelas = emprestimo.parcelas || 0;
            const parcelasPagas = emprestimo.parcelas_pagas || 0;
            const progresso = totalParcelas > 0 ? Math.round((parcelasPagas / totalParcelas) * 100) : 0;
            
            // Formatar data
            const dataContratacao = emprestimo.data_contratacao 
                ? new Date(emprestimo.data_contratacao).toLocaleDateString('pt-BR')
                : 'N/A';
            
            // Status com base no progresso
            let status = 'Ativo';
            let statusClass = 'bg-success';
            
            if (progresso === 100) {
                status = 'Quitado';
                statusClass = 'bg-primary';
            } else if (parcelasPagas > 0) {
                status = 'Em Andamento';
                statusClass = 'bg-warning';
            }
            
            const row = `
                <tr>
                    <td>#${emprestimo.id}</td>
                    <td>
                        <strong>${nomeCliente}</strong><br>
                        <small class="text-muted">${cpfCliente}</small>
                    </td>
                    <td>R$ ${parseFloat(emprestimo.valor_total || 0).toFixed(2)}</td>
                    <td>${totalParcelas}</td>
                    <td>${dataContratacao}</td>
                    <td>
                        <span class="badge ${statusClass}">${status}</span>
                        <div class="progress mt-1" style="height: 5px;">
                            <div class="progress-bar ${statusClass}" 
                                 style="width: ${progresso}%"></div>
                        </div>
                        <small class="text-muted">${parcelasPagas}/${totalParcelas} parcelas</small>
                    </td>
                    <td>${emprestimo.taxa_juros ? emprestimo.taxa_juros + '%' : '0%'}</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-info" onclick="verDetalhesEmprestimo(${emprestimo.id})" title="Ver Detalhes">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-warning" onclick="editarEmprestimo(${emprestimo.id})" title="Editar">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="confirmarExclusaoEmprestimo(${emprestimo.id})" title="Excluir">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            tbody.innerHTML += row;
        });
        
    } catch (error) {
        console.error('üí• Erro ao carregar empr√©stimos:', error);
        
        const tbody = document.getElementById('tabelaEmprestimos');
        tbody.innerHTML = `
            <tr>
                <td colspan="8" class="text-center text-danger py-4">
                    <i class="fas fa-exclamation-triangle"></i><br>
                    <strong>Erro ao Carregar</strong><br>
                    <small>${error.message}</small><br>
                    <button class="btn btn-sm btn-primary mt-2" onclick="carregarEmprestimos()">
                        üîÑ Tentar Novamente
                    </button>
                </td>
            </tr>
        `;
    }
}

// ‚úÖ ABRIR MODAL EMPR√âSTIMO
function abrirModalEmprestimo() {
    console.log('üîÑ Abrindo modal de empr√©stimo...');
    
    const modalElement = document.getElementById('modalEmprestimo');
    if (!modalElement) {
        console.error('‚ùå Modal n√£o encontrado! Verifique o HTML.');
        showNotification('Erro: Modal n√£o encontrado. Recarregue a p√°gina.', 'error');
        return;
    }
    
    try {
        const modal = new bootstrap.Modal(modalElement);
        
        // Resetar formul√°rio
        const form = document.getElementById('formEmprestimo');
        if (form) form.reset();
        
        // Atualizar t√≠tulo
        const title = document.getElementById('modalEmprestimoTitle');
        if (title) title.textContent = 'Novo Empr√©stimo';
        
        // Carregar clientes
        carregarClientesParaSelect();
        
        // Mostrar modal
        modal.show();
        console.log('‚úÖ Modal aberto com sucesso!');
        
    } catch (error) {
        console.error('üí• Erro ao abrir modal:', error);
        showNotification('Erro ao abrir formul√°rio: ' + error.message, 'error');
    }
}

// ‚úÖ CARREGAR CLIENTES PARA SELECT
async function carregarClientesParaSelect() {
    try {
        const response = await fetch('/api/admin/clientes');
        
        if (!response.ok) {
            throw new Error('Falha ao carregar clientes');
        }
        
        const clientes = await response.json();
        const select = document.getElementById('clienteSelect');
        
        select.innerHTML = '<option value="">Selecione um cliente</option>';
        
        clientes.forEach(cliente => {
            const option = document.createElement('option');
            option.value = cliente.cpf;
            option.textContent = `${cliente.nome} - ${cliente.cpf}`;
            select.appendChild(option);
        });
        
    } catch (error) {
        console.error('Erro ao carregar clientes:', error);
        showNotification('Erro ao carregar lista de clientes', 'error');
    }
}

// ‚úÖ CALCULAR PARCELAS
function calcularParcelas() {
    const valorTotal = parseFloat(document.getElementById('valorTotal').value) || 0;
    const parcelas = parseInt(document.getElementById('numeroParcelas').value) || 1;
    
    if (valorTotal > 0 && parcelas > 0) {
        const valorParcela = valorTotal / parcelas;
        document.getElementById('valorParcela').value = 'R$ ' + valorParcela.toFixed(2);
        
        // Gerar datas de vencimento
        gerarDatasVencimento(parcelas);
    }
}

// ‚úÖ GERAR DATAS DE VENCIMENTO
function gerarDatasVencimento(parcelas) {
    const dataContainer = document.getElementById('datasVencimento');
    dataContainer.innerHTML = '';
    
    const dataBase = new Date();
    dataBase.setMonth(dataBase.getMonth() + 1); // Primeiro vencimento em 1 m√™s
    dataBase.setDate(10); // Vencimento no dia 10
    
    for (let i = 1; i <= parcelas; i++) {
        const dataVencimento = new Date(dataBase);
        dataVencimento.setMonth(dataBase.getMonth() + (i - 1));
        
        const div = document.createElement('div');
        div.className = 'mb-2';
        div.innerHTML = `
            <label class="form-label small">Parcela ${i}:</label>
            <input type="date" class="form-control form-control-sm" 
                   value="${dataVencimento.toISOString().split('T')[0]}" 
                   readonly>
        `;
        dataContainer.appendChild(div);
    }
}

// ‚úÖ SALVAR EMPR√âSTIMO
async function salvarEmprestimo() {
    try {
        const clienteCpf = document.getElementById('clienteSelect').value;
        const valorTotal = document.getElementById('valorTotal').value;
        const numeroParcelas = document.getElementById('numeroParcelas').value;
        const taxaJuros = document.getElementById('taxaJuros').value || 0;
        const observacoes = document.getElementById('observacoesEmprestimo').value;
        
        if (!clienteCpf || !valorTotal || !numeroParcelas) {
            showNotification('Por favor, preencha cliente, valor total e n√∫mero de parcelas.', 'error');
            return;
        }
        
        const emprestimoData = {
            cliente_cpf: clienteCpf,
            valor_total: parseFloat(valorTotal),
            parcelas: parseInt(numeroParcelas),
            taxa_juros: parseFloat(taxaJuros),
            observacoes: observacoes
        };
        
        console.log('üíæ Salvando empr√©stimo...', emprestimoData);
        
        const response = await fetch('/api/admin/emprestimos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(emprestimoData)
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Falha ao salvar: ${response.status} - ${errorText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Empr√©stimo salvo:', result);
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('modalEmprestimo'));
        if (modal) modal.hide();
        
        showNotification('Empr√©stimo salvo com sucesso!', 'success');
        carregarEmprestimos();
        
    } catch (error) {
        console.error('üí• Erro ao salvar empr√©stimo:', error);
        showNotification('Erro ao salvar empr√©stimo: ' + error.message, 'error');
    }
}

// ‚úÖ CONFIRMAR EXCLUS√ÉO - VERS√ÉO CORRIGIDA
async function confirmarExclusaoEmprestimo(id) {
    try {
        console.log('üîÑ Confirmando exclus√£o do empr√©stimo:', id);
        
        // Buscar dados atualizados do empr√©stimo
        const response = await fetch('/api/admin/emprestimos');
        if (!response.ok) {
            throw new Error('Falha ao buscar empr√©stimos');
        }
        
        const emprestimos = await response.json();
        const emprestimo = emprestimos.find(emp => emp.id === id);
        
        if (!emprestimo) {
            showNotification('Empr√©stimo n√£o encontrado!', 'error');
            return;
        }

        console.log('‚úÖ Empr√©stimo encontrado para confirma√ß√£o:', emprestimo);

        // Configurar modal de confirma√ß√£o
        document.getElementById('confirmMessage').innerHTML = `
            Tem certeza que deseja excluir o empr√©stimo <strong>#${emprestimo.id}</strong>
            do cliente <strong>${emprestimo.cliente_nome}</strong>?
            <br><br>
            <strong>Valor:</strong> R$ ${parseFloat(emprestimo.valor_total || 0).toFixed(2)}<br>
            <strong>Parcelas:</strong> ${emprestimo.parcelas || 0}x<br>
            <strong>Status:</strong> ${emprestimo.status || 'Ativo'}
        `;

        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
        
        // Remover event listeners anteriores
        document.getElementById('confirmYes').onclick = null;
        document.getElementById('confirmNo').onclick = null;
        
        // Adicionar novos event listeners
        document.getElementById('confirmYes').onclick = function() {
            console.log('‚úÖ Usu√°rio confirmou exclus√£o do empr√©stimo:', id);
            excluirEmprestimo(id);
            confirmModal.hide();
        };
        
        document.getElementById('confirmNo').onclick = function() {
            console.log('‚ùå Usu√°rio cancelou exclus√£o');
            confirmModal.hide();
        };
        
        confirmModal.show();
        
    } catch (error) {
        console.error('‚ùå Erro ao confirmar exclus√£o:', error);
        showNotification('Erro ao carregar dados do empr√©stimo: ' + error.message, 'error');
    }
}
// ‚úÖ EXCLUIR EMPR√âSTIMO
async function excluirEmprestimo(id) {
    try {
        console.log('üóëÔ∏è Excluindo empr√©stimo:', id);
        
        const response = await fetch(`/api/admin/emprestimos/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('Empr√©stimo n√£o encontrado');
            }
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        showNotification('Empr√©stimo exclu√≠do com sucesso!', 'success');
        carregarEmprestimos();
        
    } catch (error) {
        console.error('‚ùå Erro ao excluir empr√©stimo:', error);
        showNotification('Erro ao excluir empr√©stimo: ' + error.message, 'error');
    }
}

// ‚úÖ FUN√á√ïES AUXILIARES
function verDetalhesEmprestimo(id) {
    showNotification(`Detalhes do empr√©stimo #${id} - Em desenvolvimento`, 'info');
}

function editarEmprestimo(id) {
    showNotification(`Editar empr√©stimo #${id} - Em desenvolvimento`, 'info');
}

function carregarPagamentos() {
    document.getElementById('tabelaPagamentos').innerHTML = `
        <tr>
            <td colspan="6" class="text-center text-muted py-4">
                <i class="fas fa-credit-card"></i><br>
                M√≥dulo de pagamentos em desenvolvimento
            </td>
        </tr>
    `;
}

function atualizarDashboard() {
    // Placeholder - implementar l√≥gica real depois
    document.getElementById('totalClientes').textContent = '0';
    document.getElementById('totalEmprestimos').textContent = '0';
    document.getElementById('totalPendentes').textContent = '0';
    document.getElementById('totalAtrasados').textContent = '0';
}

// ‚úÖ SISTEMA DE NOTIFICA√á√ïES
function showNotification(message, type = 'success', duration = 4000) {
    // Remover notifica√ß√£o anterior se existir
    const existingNotification = document.querySelector('.custom-notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Criar nova notifica√ß√£o
    const notification = document.createElement('div');
    notification.className = `custom-notification notification-${type}`;
    notification.innerHTML = `
        <div class="d-flex align-items-center p-3">
            <div class="flex-grow-1">
                <strong>${type === 'success' ? '‚úÖ Sucesso!' : type === 'error' ? '‚ùå Erro!' : '‚ö†Ô∏è Aviso!'}</strong>
                <div class="small">${message}</div>
            </div>
            <button type="button" class="btn-close btn-close-white ms-2" onclick="this.parentElement.parentElement.remove()"></button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remover ap√≥s o tempo definido
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, duration);
}

// ‚úÖ INICIALIZA√á√ÉO
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîí Sistema admin inicializado - BANCO DE DADOS APENAS');
    atualizarDashboard();
});

// ‚úÖ EXCLUIR EMPR√âSTIMO - COM DEBUG
async function excluirEmprestimo(id) {
    try {
        console.log('üóëÔ∏è Tentando excluir empr√©stimo:', id);
        
        const url = `/api/admin/emprestimos/${id}`;
        console.log('üì§ URL da requisi√ß√£o:', url);
        
        const response = await fetch(url, {
            method: 'DELETE'
        });
        
        console.log('üì• Resposta do servidor:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erro detalhado:', errorText);
            
            if (response.status === 404) {
                throw new Error('Empr√©stimo n√£o encontrado no servidor');
            } else if (response.status === 500) {
                throw new Error('Erro interno do servidor');
            }
            throw new Error(`Erro ${response.status}: ${response.statusText} - ${errorText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Resultado da exclus√£o:', result);
        
        showNotification('Empr√©stimo exclu√≠do com sucesso!', 'success');
        carregarEmprestimos();
        
    } catch (error) {
        console.error('‚ùå Erro completo ao excluir empr√©stimo:', error);
        showNotification('Erro ao excluir empr√©stimo: ' + error.message, 'error');
    }
}

// ‚úÖ FUN√á√ÉO PARA DEBUG - VER EMPR√âSTIMOS EXISTENTES
async function debugEmprestimos() {
    try {
        const response = await fetch('/api/admin/emprestimos');
        const emprestimos = await response.json();
        console.log('üìä EMPR√âSTIMOS EXISTENTES:', emprestimos);
        
        // Mostrar IDs dispon√≠veis
        const ids = emprestimos.map(emp => emp.id);
        console.log('üÜî IDs dispon√≠veis para exclus√£o:', ids);
        
        return emprestimos;
    } catch (error) {
        console.error('Erro no debug:', error);
    }
}

// Chame esta fun√ß√£o no console para ver os empr√©stimos
// debugEmprestimos();